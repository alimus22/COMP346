Create VIEW number_of_actors as
(
select mm.mid as movieid, count(distinct a.name) as totalactors
from movies mm
         join Actors A on mm.mid = A.mid
group by mm.mid );

create View common_actors as
(
select moviex.mid as movieid1, moviey.mid as movieid2, count(distinct actorx.name) as commonActor
from Movies moviex,
     Movies moviey,
     actors actorx,
     actors actory
where moviex.mid = actorx.mid
  and moviey.mid = actory.mid
  and actorx.name = actory.name
  and moviex.mid <> moviey.mid
GROUP BY moviex.mid, moviey.mid );


create view fraction_actors as
(
select moviex.mid                                                as movieid1,
       moviey.mid                                                as movieid2,
       (CAST(commonActor AS float) / CAST(totalactors AS float)) as fraction
from Movies moviex,
     Movies moviey,
     number_of_actors,
     common_actors
where moviex.mid = number_of_actors.movieid
  and moviex.mid = common_actors.movieid1
  and moviey.mid = common_actors.movieid2
  and moviex.mid <> moviey.mid);


Create VIEW number_of_tags as
(
select mm.mid as movieid, count(distinct a.tid) as totalTags
from movies mm
         join tags A on mm.mid = A.mid
group by mm.mid );


create View common_tags as
(
select moviex.mid as movieid1, moviey.mid as movieid2, count(distinct tagx.tid) as commontags
from Movies moviex,
     Movies moviey,
     tags tagx,
     tags tagsy
where moviex.mid = tagx.mid
  and moviey.mid = tagsy.mid
  and tagx.tid = tagsy.tid
  and moviex.mid <> moviey.mid
GROUP BY moviex.mid, moviey.mid );

create view fraction_tags as
(
select moviex.mid                                             as movieid1,
       moviey.mid                                             as movieid2,
       (CAST(commontags AS float) / CAST(totalTags AS float)) as fraction
from Movies moviex,
     Movies moviey,
     number_of_tags,
     common_tags
where moviex.mid = number_of_tags.movieid
  and moviex.mid = common_tags.movieid1
  and moviey.mid = number_of_tags.movieid
  and moviex.mid <> moviey.mid);


Create VIEW number_of_genres as
(
select mm.mid as movieid, count(distinct a.genre) as totalGenre
from movies mm
         join genres A on mm.mid = A.mid
group by mm.mid );

create View number_of_common_genres as
(
select moviex.mid as movieid1, moviey.mid as movieid2, count(distinct genrex.genre) as commongenre
from Movies moviex,
     Movies moviey,
     genres genrex,
     genres genrey
where moviex.mid = genrex.mid
  and moviey.mid = genrey.mid
  and genrex.genre = genrey.genre
  and moviex.mid <> moviey.mid
GROUP BY moviex.mid, moviey.mid );


create view fraction_common_genres as
(
select moviex.mid                                               as movieid1,
       moviey.mid                                               as movieid2,
       (CAST(commongenre AS float) / CAST(totalGenre AS float)) as fraction
from Movies moviex,
     Movies moviey,
     number_of_genres,
     number_of_common_genres
where moviex.mid = number_of_genres.movieid
  AND moviex.mid = number_of_common_genres.movieid1
  AND moviey.mid = number_of_common_genres.movieid2
  AND moviex.mid <> moviey.mid);


create view year_gap as
(
select mx.mid as mx1, my.mid as mx2, ABS(mx.year - my.year) as yeargap
from movies mx,
     movies my
where mx.mid <> my.mid);


create view rate_gap as
(
select mx.mid as mx1, my.mid as my2, ABS(mx.rating - my.rating) as ratingap
from movies mx,
     movies my
where mx.mid <> my.mid
  and mx.rating <> 0
    );



CREATE VIEW similarity_of_movies AS
SELECT moviex.mid                                                                 AS movieid1,
       moviey.mid                                                                 AS movieid2,
       (((f1.fraction + 0 + f3.fraction + YD.yeargap + RD.ratingap) / 5.0) * 100) AS Similarity
FROM movies moviex,
     movies moviey,
     fraction_actors f1,
     fraction_common_genres f3,
     year_gap YD,
     rate_gap RD
WHERE moviex.mid = f1.movieid1
  AND moviey.mid = f1.movieid2
  AND moviex.mid = f3.movieid1
  AND moviey.mid = f3.movieid2
  AND moviex.mid = YD.mx1
  AND moviey.mid = YD.mx2
  AND moviex.mid = RD.mx1
  AND moviey.mid = RD.my2
  AND moviex.mid <> moviey.mid;


CREATE VIEW suggestion as
(
SELECT moviex.title, moviey.rating, S.Similarity
FROM similarity_of_movies S,
     movies moviex,
     movies moviey
WHERE S.movieid1 = moviex.mid
  AND moviey.title = 'Mr. & Mrs. Smith'
  AND S.movieid2 = moviey.mid
ORDER BY S.Similarity DESC
LIMIT 10);
